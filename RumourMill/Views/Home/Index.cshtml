@{
    /**/

    ViewBag.Title = "The Grapevine";
}
@using Microsoft.AspNet.Identity

@functions
{
    static string GetPrettyDate(DateTime d)
    {
        // 1.
        // Get time span elapsed since the date.
        TimeSpan s = DateTime.Now.Subtract(d);

        // 2.
        // Get total number of days elapsed.
        int dayDiff = (int)s.TotalDays;

        // 3.
        // Get total number of seconds elapsed.
        int secDiff = (int)s.TotalSeconds;

        // 4.
        // Don't allow out of range values.
        if (dayDiff < 0 || dayDiff >= 31)
        {
            return null;
        }

        // 5.
        // Handle same-day times.
        if (dayDiff == 0)
        {
            // A.
            // Less than one minute ago.
            if (secDiff < 60)
            {
                return "Just now";
            }
            // B.
            // Less than 2 minutes ago.
            if (secDiff < 120)
            {
                return "1 minute ago";
            }
            // C.
            // Less than one hour ago.
            if (secDiff < 3600)
            {
                return string.Format("{0} minutes ago",
                    Math.Floor((double)secDiff / 60));
            }
            // D.
            // Less than 2 hours ago.
            if (secDiff < 7200)
            {
                return "1 hour ago";
            }
            // E.
            // Less than one day ago.
            if (secDiff < 86400)
            {
                return string.Format("{0} hours ago",
                    Math.Floor((double)secDiff / 3600));
            }
        }
        // 6.
        // Handle previous days.
        if (dayDiff == 1)
        {
            return "Yesterday";
        }
        if (dayDiff < 7)
        {
            return string.Format("{0} days ago",
                dayDiff);
        }
        if (dayDiff < 31)
        {
            return string.Format("{0} weeks ago",
                Math.Ceiling((double)dayDiff / 7));
        }
        return null;
    }
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div class="topwrap">
    <div class="topbar">
        @if (@User.Identity.IsAuthenticated)
        {
            <p class="welcometext">Welcome, <span class="name">@User.Identity.Name </span> &#124 <a href="/Home/ChangePassword">Change Password</a> &#124 <a href="/Home/Logout">Logout</a></p>

        }
        @if (!@User.Identity.IsAuthenticated)
        {
            <div class="welcometext">
                <a href="/Home/Login">Login</a>
            </div>
        }

    </div>
    <div class="question-header">

        <h1>The Grapevine</h1>

        Have a work related question you've heard that you think needs answered? Submit it here.
        <br />Please be sure to anonymise your questions. For more guidance, click the green information button in the top left corner.
        <form action="~/Home/Save" method="POST">
            <textarea type="text" placeholder="Enter your question here" name="questionText" required></textarea> <br />
            <button type="submit" class="buttonNew btn-1 btn-1a submitButton" value="Submit">SUBMIT</button>
            @if (TempData["UserMessage"] != null)
            {
                <span class="submitMessage">@TempData["UserMessage"]</span>
            }
        </form>
    </div>
    <div class="botbar"></div>
</div>

@* Mod modal button *@
<a id="modBtn" class="float">
    <i class="fa fa-info my-float"></i>
</a>
<div class="label-container">
    <div class="label-text">Moderator Guidance</div>
</div>


@* General modal button *@
<a id="genBtn" class="float">
    <i class="fa fa-info my-float"></i>
</a>
<div class="label-container">
    <div class="label-text">General Guidance</div>
</div>


<script type="text/javascript">

    @if (@User.IsInRole("Moderator"))
    {
        @: $("#genBtn").hide();
    }
    else
    {
        @: $("#modBtn").hide();

    }
</script>

@* Guidance Modal for Moderators *@
<div id="modModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <span class="modClose">&times;</span>
            <h2>Moderator Guidance</h2>
        </div>
        <div class="modal-body">
            <p>
                As a moderator, your role is crucial to this tool being a success. Your primary role is to approve questions submitted by anonymous users so that they can be seen by all other anonymous users, and by leadership so that they can answer the questions.
                <br /><br />
                By default you are shown the “Unmoderated” tab, allowing for you to instantly log in and start approving questions that need to be approved. You will also notice that each question is a different colour. These colours represent their current state as follows:
                <br />

                <table class="tg">
                    <tr>
                        <th class="tg-us36">Unmoderated</th>
                        <th class="tg-zf9p widerow"></th>
                    </tr>
                    <tr>
                        <td class="tg-us36">Approved</td>
                        <td class="tg-kfes widerow"></td>
                    </tr>
                    <tr>
                        <td class="tg-us36">Rejected</td>
                        <td class="tg-st2d widerow"></td>
                    </tr>
                </table>
                <br />
                <span class="modalhead">Moderator Abilities</span><br />
                As a moderator, you have a couple of main abilities. The first one of these is approving and rejecting questions. Once the question is approved/rejected, it is moved to the approved/rejected sections. As a moderator, only you and other moderators can see Unmoderated/Rejected questions.
                <br /><br />
                Additionally, you have the ability to “Edit and approve” a question. This means you can edit the text of a question, and if you provide a reason, you’re able to move this to the approved group of questions. However, you must provide a reason. Additionally, a log of all edits made to questions is kept that displays the moderators name and the reason for editing, and can be checked if a user lodges a complaint. <br /> <br />The primary reason for allowing moderators to edit questions is to anonymise the questions (remove specific names mentioned) or to remove profanity in questions that you as a moderator think need to be answered.

                <br /><br />

            </p>
        </div>
    </div>

</div>

@* Guidance Modal for all others *@
<div id="genModal" class="modal">

    <!-- Modal content -->
    <div class="modal-content">
        <div class="modal-header">
            <span class="genClose">&times;</span>
            <h2>General Guidance</h2>
        </div>
        <div class="modal-body">
            <br />
            <p>
                <span class="modalhead">What is The Grapevine?</span><br />
                This tool is to allow for questions to be submitted to the leadership anonymously. When a question is submitted, it goes to a panel of Moderators who can approve, reject or sanitise the question. Questions will only be rejected if they are not work appropriate.
                <br /><br />
                <span class="modalhead">What kind of questions should I be asking?</span><br />
                Please make sure your questions are work related and anonymised. The website isn’t for gossip, but for issues that you think leadership need to be made aware of, or questions regarding a topic you don’t want to publicly ask.
                <br /><br />
                <span class="modalhead">Why is my question not appearing?</span><br />
                When a question is submitted, it is not initially shown to anonymous users or the leadership until a Moderator has approved the question. However, once it’s approved, it will appear for everyone and can be responded to by leadership.
                <br /><br />
                <span class="modalhead">My question was changed by a moderator. Why is that?</span><br />
                Moderators have the ability to edit questions, in order to anonymise answers/edit out any profanity. However if you believe the change is unfair and changes the meaning of your question, a log of all moderator changes is kept so the change can be reversed.
                <br /><br />
            </p>
        </div>
    </div>

</div>

<div class="cta filter" style="text-align: center; padding: 15px;">

    @* Only show Unmoderatred/approved/rejected filters to Moderators and SuperAdmins *@
    @if ((@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin")))
    {

        <a class="unmod filterButton buttonNew btn-1 btn-1a" data-filter="Submitted" role="button">Unmoderated</a>
        <a class="app filterButton buttonNew btn-1 btn-1a" data-filter="Approved" role="button">Approved</a>
        <a class="rej filterButton buttonNew btn-1 btn-1a" data-filter="Rejected" role="button">Rejected</a>
    }

    <a class="all filterButton buttonNew btn-1 btn-1a" data-filter="all" role="button">Show All</a>
    <a class="unans filterButton buttonNew btn-1 btn-1a" data-filter="Unanswered" role="button">Unanswered</a>
    <a class="ans filterButton buttonNew btn-1 btn-1a" data-filter="Answered" role="button">Answered</a>

</div>

@* Main container div *@
<div class="container body-content mainparent">

    @* For every single question that has been asked *@
    @for (int i = 0, p = 0; i < Model[0].questionCount.Count; i++)
    {
        //For anonymous users, they only see approved questions
        //Moderators and Admins see all questions
        if (@Model[0].qrvmodel[p].Status == "Approved" || (@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin")))
        {
            //User raw html to generate the correct header classes for each question type
            @Html.Raw("<div class='cd-timeline__container")

            //Classes to set the status (approved/rejected/unmoderated)
            if (Model[0].qrvmodel[p].Status == "Approved")
            {
                @Html.Raw(" approved")
            }
            else if (Model[0].qrvmodel[p].Status == "Rejected")
            {
                @Html.Raw(" rejected")
            }
            else
            {
                @Html.Raw(" unmoderated")
            }

            //Classes to set if answered or not
            if (Model[0].qrvmodel[p].IsAnswered)
            {
                @Html.Raw(" answered")
            }
            else
            {
                @Html.Raw(" unanswered")
            }
            @Html.Raw("'>")
    <div class="cd-timeline__block js-cd-block">
        <div class="cd-timeline__img cd-timeline__img--movie js-cd-img">
            <img src="../Content/question.svg" alt="Question">
        </div>
        @* Depending on the user role (anon/leader or moderator/superadmin, display different classes *@
        @if ((@Model[0].qrvmodel[p].Status == "Approved") && (@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin")))
        {
            @Html.Raw("<div class='cd-timeline__content-approved cd-timeline__content js-cd-content'>")
        }
        else if ((@Model[0].qrvmodel[p].Status == "Rejected") && (@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin")))
        {
            @Html.Raw("<div class='cd-timeline__content-rejected cd-timeline__content js-cd-content'>")
        }
        else if ((@Model[0].qrvmodel[p].Status == "Submitted") && (@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin")))
        {
            @Html.Raw("<div class='cd-timeline__content-submitted cd-timeline__content js-cd-content'>")
        }
        else
        {
            @Html.Raw("<div class='cd-timeline__content js-cd-content'>")
        }
        @* Display the question text *@
        <p class="innertext">
            @Model[0].qrvmodel[p].QuestionText
        </p>

        @* Display the beautified version of the date *@
        <span class="cd-timeline__date">
            Asked @GetPrettyDate(Model[0].qrvmodel[p].TimeAsked)

            @* If the question has been edited, set the edit reason to display *@
            @if (!((@Model[0].qrvmodel[p].EditReason == "") || (@Model[0].qrvmodel[p].EditReason == null)))
            {
                <br /><span>Edit Reason: @Model[0].qrvmodel[p].EditReason</span>
            }
        </span>

        @* If the user is a Leader or a SuperAdmin, show the option to reply to the Question *@
        @if (@User.IsInRole("Leader") || @User.IsInRole("SuperAdmin"))
        {
            //Init the form
            <form action="~/Home/SaveReply" method="POST">
                @* The input field itself *@
                <div class="group">
                    <input type="text" name="replyText" style="width:100%;" required>
                    <span class="highlight"></span>
                    <span class="bar" style="width:100%;"></span>
                    <label>Enter your reply here</label>
                </div>

                @* Hidden input to set the ID that the reply should be set to *@
                <input type="hidden" name="fk_QuestionId" value="@Model[0].qrvmodel[p].QuestionId" />
                <button type="submit" class="formButton submit buttonNew btn-1 btn-1a" value="Submit">SUBMIT REPLY</button>
            </form>
        }

        @* If user is a moderator or superadmin, and the question hasn't been marked as Approved, show the Approve button *@
        @if (@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin") && @Model[0].qrvmodel[p].Status != "Approved")
        {
            <form action="~/Home/AcceptQuestion" class="buttons" method="POST">
                <input type="hidden" name="fk_QuestionId" value="@Model[0].qrvmodel[p].QuestionId" />
                <input type="hidden" name="IsApproved" value="True" />
                <button type="submit" class="formButton approve buttonNew btn-1 btn-1a" value="Submit">APPROVE</button>
            </form>
        }
        @* If user is a moderator or superadmin, and the question hasn't been marked as Rejected, show the Rejected button *@
        @if (@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin") && @Model[0].qrvmodel[p].Status != "Rejected")
        {
            <form action="~/Home/RejectQuestion" class="buttons" method="POST">
                <input type="hidden" name="fk_QuestionId" value="@Model[0].qrvmodel[p].QuestionId" />
                <input type="hidden" name="IsApproved" value="False" />
                <button type="submit" class="formButton reject buttonNew btn-1 btn-1a" value="Submit">REJECT</button>
            </form>
        }
        @* If user is a moderator or superadmin, and the question hasn't been marked as Approved, show the Edit form *@
        @if ((@User.IsInRole("Moderator") || @User.IsInRole("SuperAdmin")) && @Model[0].qrvmodel[p].Status != "Approved")
        {
            <div style="position:relative;clear: both;">
                @* Edit form *@
                <form action="~/Home/EditQuestion" class="editForm" method="POST">
                    <input type="hidden" name="questionId" value="@Model[0].qrvmodel[p].QuestionId" />
                    <input type="hidden" name="IsApproved" value="True" />
                    <input type="hidden" name="user" value="@User.Identity.Name" />
                    <input type="hidden" name="oldText" value="@Model[0].qrvmodel[p].QuestionText" />
                    <br />

                    <div class="group">
                        <input type="text" class="edittextareas" value="@Model[0].qrvmodel[p].QuestionText" name="editText" required>
                        <span class="highlight"></span>
                        <span class="bar"></span>
                        <label>Question Text</label>
                    </div>

                    <div class="group">
                        @{
                            //Code to help the javascript class show and hide the additional field for the Edit form
                            int edited;
                            if (((@Model[0].qrvmodel[p].EditReason == "") || (@Model[0].qrvmodel[p].EditReason == null)))
                            {
                                edited = 1;
                            }
                            else
                            {
                                edited = 0;
                            }

                            string reasonClass = "reason " + edited + " reason" + @Model[0].qrvmodel[p].QuestionId;
                        }
                        <select name="reason" id="reason" class="@reasonClass" required>
                            <option value="">Please select edit reason...</option>
                            <option value="Profanity">Profanity</option>
                            <option value="Removing client name">Removing client name</option>
                            <option value="Removing individual name">Removing individual name</option>
                            <option value="Other">Other (please specify)</option>
                        </select>

                        @{
                            string editClass = "edittextareas edittextarea" + @Model[0].qrvmodel[p].QuestionId;
                        }
                        <br />
                        <input type="text" class="@editClass" name="reasonOther" id="reasonOther" placeholder="Please enter a reason" style="display:none" required />



                        @*<input type="text" class="edittextareas" name="reason" required>
                        <span class="highlight"></span>
                        <span class="bar"></span>
                        <label><i>Enter edit reason</i></label>*@
                    </div>
                    <button type="submit" class="formButton approve buttonNew btn-1 btn-1a" style="float:unset" value="Submit">Edit and Approve</button>
                </form>
            </div>
        }
        <div id="blank"></div>
    </div>
            @Html.Raw("</div>")
            //Display the reply fields
            if (Model[0].qrvmodel[p].IsAnswered)
            {
                //For each of the replies to this quesiton, display the reply
                for (int j = Model[0].questionCount[i] - 1; j >= 0; j--)
                {
                    <div class="cd-timeline__block js-cd-block timeline-reply">

                        <div class="cd-timeline__img cd-timeline__img--movie js-cd-img reply-img" style="background-image:url(../Content/@Model[0].qrvmodel[p+j].Image)">

                        </div>

                        <div class="leadername">
                            @Model[0].qrvmodel[p + j].LeaderName
                        </div>
                        <div class="cd-timeline__content reply-frame">

                            <p class="innertext reply-align">
                                @Model[0].qrvmodel[p + j].ReplyText
                            </p>
                            <span class="cd-timeline__date reply-align">
                                Asked @GetPrettyDate(Model[0].qrvmodel[p + j].TimeReplied)
                            </span>
                        </div> <!-- cd-timeline__content -->
                    </div> <!-- Reply -->
                }
                //jHold += j;
                // i = i + Model[0].questionCount[i] - 1;
                // continue;

            }
            @Html.Raw("</div>")

        }

        //Increment past the additional rows, as calculated in the controller
        if (Model[0].questionCount[i] == 0)
        {
            p++;
        }
        else
        {
            p = p + Model[0].questionCount[i];
        }
    }
</div>
<script>
//Jquery to filter out the results when clicking filters
@if (@User.IsInRole("Moderator"))
{
    @: $(".approved").fadeOut();
    @: $(".rejected").fadeOut();
    @: $(".unmoderated").fadeIn();
    @: $(".unmod").addClass("active");
    @: $(".unmod").click();
}
else
{
    @: $(".all").addClass("active");
}

</script>
<div class="noquestions"><h1>No additional results found.</h1></div>
<div class="spacer" style="height:100px"></div>
<div class="footer topbar">

    <p class="welcometext footertext">Think you've found a bug? <a href="mailto:stephan.x.williams@pwc.com?&cc=daniel.y.callaghan@pwc.com">Contact us</a> with details.</p>


</div>